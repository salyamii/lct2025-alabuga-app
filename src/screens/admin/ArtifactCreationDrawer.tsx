import { useState, useRef, useEffect } from "react";
import { Button } from "../../components/ui/button";
import { Input } from "../../components/ui/input";
import { Textarea } from "../../components/ui/textarea";
import { Label } from "../../components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../../components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "../../components/ui/card";
import { Drawer, DrawerContent, DrawerHeader, DrawerTitle, DrawerDescription } from "../../components/ui/drawer";
import { useArtifactStore } from "../../stores/useArtifactStore";
import { useOverlayStore } from "../../stores/useOverlayStore";
import { Gem, X, Upload, Image as ImageIcon } from "lucide-react";
import { toast } from "sonner";
import { ArtifactCreateRequest, ArtifactRarityEnum } from "../../api/types/apiTypes";
import { mediaService } from "../../api/services/mediaService";

export function ArtifactCreationDrawer() {
  const { artifactCreationOpen, closeArtifactCreation } = useOverlayStore();
  const { createArtifact } = useArtifactStore();
  const [isCreating, setIsCreating] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadedImageUrl, setUploadedImageUrl] = useState<string>("");
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [formData, setFormData] = useState({
    title: "",
    description: "",
    rarity: "",
    imageUrl: ""
  });

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleFileUpload = async (file: File) => {
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      toast.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
      toast.error("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB");
      return;
    }

    try {
      setIsUploading(true);
      
      // –°–æ–∑–¥–∞–µ–º Blob URL –¥–ª—è –ø—Ä–µ–≤—å—é
      const blobUrl = URL.createObjectURL(file);
      setUploadedImageUrl(blobUrl);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await mediaService.uploadFile(file);
      
      if (response.data?.url) {
        setFormData(prev => ({
          ...prev,
          imageUrl: response.data.url
        }));
        toast.success("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! üñºÔ∏è");
      } else {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      // –û—á–∏—â–∞–µ–º blob URL –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (uploadedImageUrl) {
        URL.revokeObjectURL(uploadedImageUrl);
        setUploadedImageUrl("");
      }
    } finally {
      setIsUploading(false);
    }
  };

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      handleFileUpload(file);
    }
  };

  const handleUploadClick = () => {
    fileInputRef.current?.click();
  };

  const handleRemoveImage = () => {
    setUploadedImageUrl("");
    setFormData(prev => ({
      ...prev,
      imageUrl: ""
    }));
  };


  const handleCreate = async () => {
    if (!formData.title.trim()) {
      toast.error("–ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!");
      return;
    }

    if (!formData.description.trim()) {
      toast.error("–û–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!");
      return;
    }

    if (!formData.rarity) {
      toast.error("–†–µ–¥–∫–æ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!");
      return;
    }

    try {
      setIsCreating(true);
      const artifactData: ArtifactCreateRequest = {
        title: formData.title.trim(),
        description: formData.description.trim(),
        rarity: formData.rarity as ArtifactRarityEnum,
        imageUrl: formData.imageUrl.trim() || ""
      };

      await createArtifact(artifactData);
      
      toast.success("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üíé", {
        description: `"${formData.title}" –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É`
      });

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({ title: "", description: "", rarity: "", imageUrl: "" });
      closeArtifactCreation();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    } finally {
      setIsCreating(false);
    }
  };

  const handleClose = () => {
    // –û—á–∏—â–∞–µ–º blob URL –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    if (uploadedImageUrl) {
      URL.revokeObjectURL(uploadedImageUrl);
    }
    setFormData({ title: "", description: "", rarity: "", imageUrl: "" });
    setUploadedImageUrl("");
    closeArtifactCreation();
  };

  return (
    <Drawer open={artifactCreationOpen} onOpenChange={handleClose}>
      <DrawerContent className="max-w-2xl mx-auto max-h-[90vh] flex flex-col">
        <DrawerHeader className="flex-shrink-0">
          <DrawerTitle className="flex items-center gap-2">
            <Gem className="w-5 h-5" />
            –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
          </DrawerTitle>
          <DrawerDescription>
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É
          </DrawerDescription>
        </DrawerHeader>

        <div className="px-6 pb-6 space-y-6 flex-1 overflow-y-auto">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ *</Label>
                <Input
                  id="title"
                  value={formData.title}
                  onChange={(e) => handleInputChange("title", e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"
                  className="w-full"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ *</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => handleInputChange("description", e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"
                  className="w-full min-h-[100px]"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="rarity">–†–µ–¥–∫–æ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ *</Label>
                <Select value={formData.rarity} onValueChange={(value) => handleInputChange("rarity", value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="common">–û–±—ã—á–Ω—ã–π</SelectItem>
                    <SelectItem value="uncommon">–ù–µ–æ–±—ã—á–Ω—ã–π</SelectItem>
                    <SelectItem value="rare">–†–µ–¥–∫–∏–π</SelectItem>
                    <SelectItem value="epic">–≠–ø–∏—á–µ—Å–∫–∏–π</SelectItem>
                    <SelectItem value="legendary">–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞</Label>
                
                {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ */}
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  onChange={handleFileSelect}
                  className="hidden"
                />

                {uploadedImageUrl ? (
                  <div className="space-y-3">
                    {/* –ü—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                    <div className="relative w-full h-48 border-2 border-dashed border-gray-300 rounded-lg overflow-hidden">
                      <img
                        src={uploadedImageUrl}
                        alt="–ü—Ä–µ–≤—å—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"
                        className="w-full h-full object-cover"
                      />
                      <Button
                        type="button"
                        variant="destructive"
                        size="sm"
                        className="absolute top-2 right-2"
                        onClick={handleRemoveImage}
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    </div>
                    
                    {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                    <Button
                      type="button"
                      variant="outline"
                      onClick={handleUploadClick}
                      disabled={isUploading}
                      className="w-full"
                    >
                      <Upload className="w-4 h-4 mr-2" />
                      {isUploading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ó–∞–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
                    <Button
                      type="button"
                      variant="outline"
                      onClick={handleUploadClick}
                      disabled={isUploading}
                      className="w-full h-32 border-2 border-dashed border-gray-300 hover:border-gray-400"
                    >
                      <div className="flex flex-col items-center gap-2">
                        <ImageIcon className="w-8 h-8 text-gray-400" />
                        <span className="text-sm text-gray-600">
                          {isUploading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"}
                        </span>
                        <span className="text-xs text-gray-500">
                          PNG, JPG –¥–æ 5MB
                        </span>
                      </div>
                    </Button>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>


        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π - –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –≤–Ω–∏–∑—É */}
        <div className="flex-shrink-0 px-6 pb-6">
          <div className="flex justify-end gap-3">
            <Button variant="outline" onClick={handleClose} disabled={isCreating}>
              <X className="w-4 h-4 mr-2" />
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              onClick={handleCreate} 
              disabled={isCreating || !formData.title.trim() || !formData.description.trim() || !formData.rarity}
              className="bg-primary hover:bg-primary-600"
            >
              {isCreating ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç"}
            </Button>
          </div>
        </div>
      </DrawerContent>
    </Drawer>
  );
}
