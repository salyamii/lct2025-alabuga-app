import { Button } from "../../components/ui/button";
import {
  Tabs,
  TabsList,
  TabsTrigger,
  TabsContent,
} from "../../components/ui/tabs";
import { AdminDashboard } from "./AdminDashboard";
import { AdminUsers } from "./AdminUsers";
import { AdminMission } from "./AdminMission";
import { AdminSeason } from "./AdminSeason";
import { AdminCompetency } from "./AdminCompetency";
import { AdminRank } from "./AdminRank";
import { AdminSkill } from "./AdminSkill"; // NEW
import { AdminSettings } from "./AdminSettings";
import { MissionCreationDrawer } from "./MissionCreationDrawer";
import { MissionEditDrawer } from "./MissionEditDrawer";
import { CompetencyCreationDrawer } from "./CompetencyCreationDrawer";
import { CompetencyEditDrawer } from "./CompetencyEditDrawer";
import { RankCreationDrawer } from "./RankCreationDrawer";
import { RankEditDrawer } from "./RankEditDrawer";
import { SkillCreationDrawer } from "./SkillCreationDrawer"; // NEW
import { SkillEditDrawer } from "./SkillEditDrawer"; // NEW
import { TaskCreationDrawer } from "./TaskCreationDrawer";
import { TaskEditDrawer } from "./TaskEditDrawer";
import { ArtifactCreationDrawer } from "./ArtifactCreationDrawer";
import { ArtifactEditDrawer } from "./ArtifactEditDrawer";
import { StoreItemCreationDrawer } from "./StoreItemCreationDrawer";
import { StoreItemEditDrawer } from "./StoreItemEditDrawer";
import { SeasonCreationDrawer } from "./SeasonCreationDrawer";
import { SeasonEditDrawer } from "./SeasonEditDrawer";
import { MissionChainCreationDrawer } from "./MissionChainCreationDrawer";
import { MissionChainEditDrawer } from "./MissionChainEditDrawer";
import { ArrowLeft, Shield } from "lucide-react";
import { useOverlayStore } from "../../stores/useOverlayStore";
import { useSeasonStore } from "../../stores/useSeasonStore";
import { useMissionStore } from "../../stores/useMissionStore";
import { useMissionChainStore } from "../../stores/useMissionChainStore";
import { useCompetencyStore } from "../../stores/useCompetencyStore";
import { useRankStore } from "../../stores/useRankStore";
import { useSkillStore } from "../../stores/useSkillStore"; // NEW
import { useTaskStore } from "../../stores/useTaskStore";
import { useArtifactStore } from "../../stores/useArtifactStore";
import { useStoreStore } from "../../stores/useStoreStore";
import { Competency } from "../../domain/competency";
import { Rank } from "../../domain/rank";
import { Skill } from "../../domain/skill"; // NEW
import { Task } from "../../domain/task";
import { Artifact } from "../../domain/artifact";
import { StoreItem } from "../../domain/store";
import { toast } from "sonner";

interface AdminScreenProps {
  onBack: () => void;
  onUserDetailOpen: (userId: string) => void;
}

export function AdminScreen({ onBack, onUserDetailOpen }: AdminScreenProps) {
  const {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–≤–µ—Ä–ª–µ–µ–≤
    missionCreationOpen,
    missionEditOpen,
    competencyCreationOpen,
    competencyEditOpen,
    rankCreationOpen,
    rankEditOpen,
    skillCreationOpen, // NEW
    skillEditOpen, // NEW
    taskCreationOpen,
    taskEditOpen,
    artifactCreationOpen,
    artifactEditOpen,
    badgeCreationOpen,
    rewardCreationOpen,
    storeManagementOpen,
    chainCreationOpen,
    chainEditOpen,
    seasonCreationOpen,
    seasonEditOpen,
    selectedChain,
    selectedMission,
    selectedCompetency,
    selectedRank,
    selectedSkill, // NEW
    selectedTask,
    selectedArtifact,
    selectedStoreItem,
    selectedSeason,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    openMissionCreation,
    closeMissionCreation,
    openMissionEdit,
    closeMissionEdit,
    openCompetencyCreation,
    closeCompetencyCreation,
    openCompetencyEdit,
    closeCompetencyEdit,
    openRankCreation,
    closeRankCreation,
    openRankEdit,
    closeRankEdit,
    openSkillCreation, // NEW
    closeSkillCreation, // NEW
    openSkillEdit, // NEW
    closeSkillEdit, // NEW
    openTaskCreation,
    closeTaskCreation,
    openTaskEdit,
    closeTaskEdit,
    openArtifactCreation,
    closeArtifactCreation,
    openArtifactEdit,
    closeArtifactEdit,
    openStoreItemCreation,
    closeStoreItemCreation,
    openStoreItemEdit,
    closeStoreItemEdit,
    openBadgeCreation,
    closeBadgeCreation,
    openRewardCreation,
    closeRewardCreation,
    openStoreManagement,
    closeStoreManagement,
    openChainCreation,
    closeChainCreation,
    openChainEdit,
    closeChainEdit,
    openSeasonCreation,
    closeSeasonCreation,
    openSeasonEdit,
    closeSeasonEdit,
    setSelectedChain,
    setSelectedMission,
    setSelectedCompetency,
    setSelectedRank,
    setSelectedSkill, // NEW
    setSelectedTask,
    setSelectedArtifact,
    setSelectedStoreItem,
    setSelectedSeason,
  } = useOverlayStore();

  const { deleteSeason } = useSeasonStore();
  const { deleteMission } = useMissionStore();
  const { deleteMissionChain } = useMissionChainStore();
  const { deleteCompetency } = useCompetencyStore();
  const { deleteRank } = useRankStore();
  const { deleteSkill } = useSkillStore(); // NEW
  const { deleteTask } = useTaskStore();
  const { deleteArtifact } = useArtifactStore();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞
  const handleDeleteSeason = async (season: any) => {
    if (!season) return;

    try {
      await deleteSeason(season.id);
      toast.success("–°–µ–∑–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! üóëÔ∏è", {
        description: `"${season.name}" –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã`,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–∏—Å—Å–∏–∏
  const handleDeleteMission = async (mission: any) => {
    if (!mission) return;

    try {
      await deleteMission(mission.id);
      toast.success("–ú–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! üóëÔ∏è", {
        description: `"${mission.title}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã`,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–µ–ø–æ—á–µ–∫ –º–∏—Å—Å–∏–π
  const handleCreateChain = () => {
    openChainCreation();
  };

  const handleEditChain = (chain: any) => {
    setSelectedChain(chain);
    openChainEdit(chain);
  };

  const handleDeleteChain = async (chain: any) => {
    if (!chain) return;

    try {
      await deleteMissionChain(chain.id);
      toast.success("–¶–µ–ø–æ—á–∫–∞ –º–∏—Å—Å–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! üóëÔ∏è", {
        description: `"${chain.name}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã`,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
  const handleDeleteCompetency = async (competency: Competency) => {
    if (!competency) return;

    try {
      await deleteCompetency(competency.id);
      toast.success("–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! üóëÔ∏è", {
        description: `"${competency.name}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã`,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞
  const handleDeleteRank = async (rank: Rank) => {
    if (!rank) return;
    try {
      await deleteRank(rank.id);
      toast.success("–†–∞–Ω–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! üóëÔ∏è", {
        description: `"${rank.name}" –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã`,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–Ω–≥–∞:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞ // NEW
  const handleDeleteSkill = async (skill: Skill) => {
    if (!skill) return;
    try {
      await deleteSkill(skill.id);
      toast.success("–ù–∞–≤—ã–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! üóëÔ∏è", {
        description: `"${skill.name}" –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã`,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  const handleDeleteTask = async (task: Task) => {
    if (!task) return;
    try {
      await deleteTask(task.id);
      toast.success("–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ! üóëÔ∏è", {
        description: `"${task.title}" –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã`,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
  const handleDeleteArtifact = async (artifact: Artifact) => {
    if (!artifact) return;
    try {
      await deleteArtifact(artifact.id);
      toast.success("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! üóëÔ∏è", {
        description: `"${artifact.title}" –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã`,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
  const handleCreateTask = () => {
    openTaskCreation();
  };

  const handleEditTask = (task: Task) => {
    setSelectedTask(task);
    openTaskEdit(task);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
  const handleCreateArtifact = () => {
    openArtifactCreation();
  };

  const handleEditArtifact = (artifact: Artifact) => {
    setSelectedArtifact(artifact);
    openArtifactEdit(artifact);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
  const handleCreateStoreItem = () => {
    openStoreItemCreation();
  };

  const handleEditStoreItem = (item: StoreItem) => {
    setSelectedStoreItem(item);
    openStoreItemEdit(item);
  };

  const handleDeleteStoreItem = async (item: StoreItem) => {
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${item.title}"?`)) {
      try {
        const { deleteItem } = useStoreStore.getState();
        await deleteItem(item.id);
        toast.success("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", error);
        toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞");
      }
    }
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="sticky top-0 z-40 bg-card border-b border-border">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" onClick={onBack} className="p-2">
              <ArrowLeft className="w-4 h-4" />
            </Button>
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gradient-to-br from-primary to-info rounded-lg flex items-center justify-center">
                <Shield className="w-5 h-5 text-white" />
              </div>
              <div>
                <h1 className="text-lg md:text-xl font-semibold">
                  –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                </h1>
                <p className="text-sm text-muted-foreground">
                  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏—Å—Å–∏—è–º–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="max-w-7xl mx-auto px-4 py-6">
        <Tabs defaultValue="dashboard">
          <TabsList className="inline-flex w-full max-w-7xl overflow-x-auto">
            <TabsTrigger value="dashboard">–°–≤–æ–¥–∫–∞</TabsTrigger>
            <TabsTrigger value="missions">–ú–∏—Å—Å–∏–∏</TabsTrigger>
            <TabsTrigger value="seasons">–°–µ–∑–æ–Ω—ã</TabsTrigger>
            <TabsTrigger value="users">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</TabsTrigger>
            <TabsTrigger value="settings">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</TabsTrigger>
          </TabsList>

          <AdminDashboard />

              <AdminMission
                handleCreateMission={openMissionCreation}
                handleEditMission={(mission) => openMissionEdit(mission)}
                handleDeleteMission={handleDeleteMission}
                setSelectedMission={setSelectedMission}
                handleCreateChain={handleCreateChain}
                handleEditChain={handleEditChain}
                handleDeleteChain={handleDeleteChain}
                setSelectedChain={setSelectedChain}
              />
          
          <AdminSeason 
            handleCreateSeason={openSeasonCreation}
            handleEditSeason={(season) => openSeasonEdit(season)}
            handleDeleteSeason={handleDeleteSeason}
            setSelectedSeason={setSelectedSeason}
          />

          <AdminUsers onUserDetailOpen={onUserDetailOpen} />

          <AdminSettings
            handleCreateReward={openRewardCreation}
            handleCreateBadge={openBadgeCreation}
            handleManageStore={openStoreManagement}
            handleCreateCompetency={openCompetencyCreation}
            handleEditCompetency={(competency) => openCompetencyEdit(competency)}
            handleDeleteCompetency={handleDeleteCompetency}
            setSelectedCompetency={setSelectedCompetency}
            handleCreateRank={openRankCreation}
            handleEditRank={(rank) => openRankEdit(rank)}
            handleDeleteRank={handleDeleteRank}
            setSelectedRank={setSelectedRank}
            handleCreateSkill={openSkillCreation}
            handleEditSkill={(skill) => openSkillEdit(skill)}
            handleDeleteSkill={handleDeleteSkill}
            setSelectedSkill={setSelectedSkill}
            handleCreateTask={handleCreateTask}
            handleEditTask={handleEditTask}
            handleDeleteTask={handleDeleteTask}
            setSelectedTask={setSelectedTask}
            handleCreateArtifact={handleCreateArtifact}
            handleEditArtifact={handleEditArtifact}
            handleDeleteArtifact={handleDeleteArtifact}
            setSelectedArtifact={setSelectedArtifact}
            handleCreateStoreItem={handleCreateStoreItem}
            handleEditStoreItem={handleEditStoreItem}
            handleDeleteStoreItem={handleDeleteStoreItem}
            setSelectedStoreItem={setSelectedStoreItem}
          />
        </Tabs>
      </div>

          {/* Drawers */}
          <MissionCreationDrawer
            open={missionCreationOpen}
            onOpenChange={(open) => open ? openMissionCreation() : closeMissionCreation()}
          />

          <MissionEditDrawer // NEW
            open={missionEditOpen}
            onOpenChange={(open) => open ? openMissionEdit() : closeMissionEdit()}
            mission={selectedMission}
          />

      <BadgeCreationDrawer
        open={badgeCreationOpen}
        onOpenChange={(open) => open ? openBadgeCreation() : closeBadgeCreation()}
      />

      <RewardCreationDrawer
        open={rewardCreationOpen}
        onOpenChange={(open) => open ? openRewardCreation() : closeRewardCreation()}
      />

      <StoreManagementDrawer
        open={storeManagementOpen}
        onOpenChange={(open) => open ? openStoreManagement() : closeStoreManagement()}
      />

      <MissionChainCreationDrawer
        open={chainCreationOpen}
        onOpenChange={(open) => open ? openChainCreation() : closeChainCreation()}
      />

      <MissionChainEditDrawer
        open={chainEditOpen}
        onOpenChange={(open) => open ? openChainEdit() : closeChainEdit()}
        chain={selectedChain}
      />

      <SeasonCreationDrawer
        open={seasonCreationOpen}
        onOpenChange={(open) => open ? openSeasonCreation() : closeSeasonCreation()}
      />

          <SeasonEditDrawer
            open={seasonEditOpen}
            onOpenChange={(open) => open ? openSeasonEdit() : closeSeasonEdit()}
            season={selectedSeason}
          />

          <CompetencyCreationDrawer />

          <CompetencyEditDrawer competency={selectedCompetency} />

          <RankCreationDrawer />

          <RankEditDrawer rank={selectedRank} />

          <SkillCreationDrawer />

          <SkillEditDrawer skill={selectedSkill} />

          <TaskCreationDrawer />

          <TaskEditDrawer task={selectedTask} />

          <ArtifactCreationDrawer />

          <ArtifactEditDrawer artifact={selectedArtifact} />

          <StoreItemCreationDrawer />

          <StoreItemEditDrawer item={selectedStoreItem} />
        </div>
      );
    }

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Drawer
const BadgeCreationDrawer = ({
  open,
  onOpenChange,
}: {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}) => null;
const RewardCreationDrawer = ({
  open,
  onOpenChange,
}: {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}) => null;
const StoreManagementDrawer = ({
  open,
  onOpenChange,
}: {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}) => null;

// –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ç–≤–µ–π –∏ —Ü–µ–ø–µ–π –º–∏—Å—Å–∏–π (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ AdminSeason.tsx)
/*
// Mock data for branches
const branches = [
  {
    id: "branch-1",
    title: "Frontend Development Path",
    description: "Complete frontend development skills from basics to advanced",
    category: "Frontend",
    rule: {
      type: "MAND_AND_ANY" as const,
      display: "MAND 2 + ANY 1",
      mandatoryCount: 2,
      anyCount: 1,
    },
    progress: {
      completed: 3,
      total: 5,
    },
    status: "active",
    season: "Delta Constellation",
    createdDate: "2024-03-01",
    participants: 147,
    completionRate: 78,
    rewards: {
      xp: 800,
      mana: 1200,
      artifacts: ["Frontend Expert", "UI Master"],
    },
  },
  {
    id: "branch-2",
    title: "Backend Infrastructure",
    description: "Build robust backend systems and APIs",
    category: "Backend",
    rule: {
      type: "ALL" as const,
      display: "ALL",
      mandatoryCount: 0,
      anyCount: 0,
    },
    progress: {
      completed: 2,
      total: 4,
    },
    status: "active",
    season: "Delta Constellation",
    createdDate: "2024-02-28",
    participants: 93,
    completionRate: 65,
    rewards: {
      xp: 1000,
      mana: 1500,
      artifacts: ["Backend Architect"],
    },
  },
  {
    id: "branch-3",
    title: "DevOps & Deployment",
    description: "Master deployment pipelines and infrastructure",
    category: "DevOps",
    rule: {
      type: "ANY" as const,
      display: "ANY 3",
      mandatoryCount: 0,
      anyCount: 3,
    },
    progress: {
      completed: 1,
      total: 6,
    },
    status: "draft",
    season: "Delta Constellation",
    createdDate: "2024-03-05",
    participants: 0,
    completionRate: 0,
    rewards: {
      xp: 1200,
      mana: 1800,
      artifacts: ["DevOps Engineer", "Cloud Specialist", "Pipeline Master"],
    },
  },
];

// Mock data for mission chains
const chains = [
  {
    id: "chain-1",
    title: "React Mastery Journey",
    description: "Complete step-by-step progression through React fundamentals to advanced patterns",
    category: "Frontend",
    season: "Delta Constellation",
    isLinear: true,
    autoUnlock: true,
    requiresSequentialCompletion: true,
    status: "active",
    createdDate: "2024-03-01",
    participants: 234,
    completionRate: 82,
    totalMissions: 4,
    currentMissionIndex: 2,
    estimatedTotalDuration: "8 hours",
    completionRewards: {
      xp: 1500,
      mana: 2000,
      artifacts: ["React Master"],
      badges: ["Frontend Specialist"],
    },
    missions: [
      {
        id: "chain-1-mission-1",
        title: "React Fundamentals",
        description: "Learn JSX, components, and props",
        difficulty: "Beginner",
        type: "Individual",
        status: "completed",
        estimatedDuration: "2 hours",
        xpReward: 200,
        manaReward: 300,
      },
      {
        id: "chain-1-mission-2",
        title: "State Management Basics",
        description: "Master useState and useEffect hooks",
        difficulty: "Intermediate",
        type: "Individual",
        status: "completed",
        estimatedDuration: "2 hours",
        xpReward: 300,
        manaReward: 450,
      },
      {
        id: "chain-1-mission-3",
        title: "Component Architecture",
        description: "Build reusable component systems",
        difficulty: "Advanced",
        type: "Group",
        status: "in_progress",
        estimatedDuration: "2 hours",
        xpReward: 400,
        manaReward: 600,
      },
      {
        id: "chain-1-mission-4",
        title: "Advanced React Patterns",
        description: "Master context, custom hooks, and performance optimization",
        difficulty: "Expert",
        type: "Individual",
        status: "locked",
        estimatedDuration: "2 hours",
        xpReward: 500,
        manaReward: 750,
      },
    ],
  },
  {
    id: "chain-2",
    title: "Full-Stack Development Path",
    description: "End-to-end web development from frontend to deployment",
    category: "Full-Stack",
    season: "Delta Constellation",
    isLinear: true,
    autoUnlock: false,
    requiresSequentialCompletion: true,
    status: "draft",
    createdDate: "2024-03-05",
    participants: 0,
    completionRate: 0,
    totalMissions: 6,
    currentMissionIndex: 0,
    estimatedTotalDuration: "15 hours",
    completionRewards: {
      xp: 2500,
      mana: 3500,
      artifacts: ["Full-Stack Developer", "System Architect"],
      badges: ["Complete Developer"],
    },
    missions: [
      {
        id: "chain-2-mission-1",
        title: "Frontend Foundations",
        description: "HTML, CSS, and JavaScript essentials",
        difficulty: "Beginner",
        type: "Individual",
        status: "todo",
        estimatedDuration: "3 hours",
        xpReward: 250,
        manaReward: 400,
      },
      {
        id: "chain-2-mission-2",
        title: "React Framework",
        description: "Component-based development",
        difficulty: "Intermediate",
        type: "Individual",
        status: "locked",
        estimatedDuration: "3 hours",
        xpReward: 350,
        manaReward: 500,
      },
      {
        id: "chain-2-mission-3",
        title: "Backend API Development",
        description: "RESTful APIs and database integration",
        difficulty: "Advanced",
        type: "Individual",
        status: "locked",
        estimatedDuration: "3 hours",
        xpReward: 450,
        manaReward: 650,
      },
    ],
  },
  {
    id: "chain-3",
    title: "Leadership Excellence Journey",
    description: "Develop essential leadership and team management skills",
    category: "Leadership",
    season: "Delta Constellation",
    isLinear: false,
    autoUnlock: true,
    requiresSequentialCompletion: false,
    status: "active",
    createdDate: "2024-02-28",
    participants: 89,
    completionRate: 67,
    totalMissions: 3,
    currentMissionIndex: 1,
    estimatedTotalDuration: "6 hours",
    completionRewards: {
      xp: 1200,
      mana: 1600,
      artifacts: ["Leadership Badge"],
      badges: ["Team Leader"],
    },
    missions: [
      {
        id: "chain-3-mission-1",
        title: "Communication Fundamentals",
        description: "Effective team communication strategies",
        difficulty: "Intermediate",
        type: "Group",
        status: "completed",
        estimatedDuration: "2 hours",
        xpReward: 300,
        manaReward: 400,
      },
      {
        id: "chain-3-mission-2",
        title: "Project Management",
        description: "Agile methodologies and team coordination",
        difficulty: "Advanced",
        type: "Group",
        status: "in_progress",
        estimatedDuration: "2 hours",
        xpReward: 400,
        manaReward: 600,
      },
      {
        id: "chain-3-mission-3",
        title: "Mentorship Skills",
        description: "Guide and develop junior team members",
        difficulty: "Expert",
        type: "Event",
        status: "locked",
        estimatedDuration: "2 hours",
        xpReward: 500,
        manaReward: 750,
      },
    ],
  },
];
*/
