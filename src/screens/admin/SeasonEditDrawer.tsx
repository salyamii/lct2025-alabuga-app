import { useState, useEffect } from "react";
import { Button } from "../../components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "../../components/ui/card";
import { Input } from "../../components/ui/input";
import { Label } from "../../components/ui/label";
import {
  Drawer,
  DrawerContent,
  DrawerHeader,
  DrawerTitle,
} from "../../components/ui/drawer";
import { toast } from "sonner";
import {
  X,
  Calendar,
  Save,
  Star,
  Edit,
} from "lucide-react";
import { useSeasonStore } from "../../stores/useSeasonStore";
import { Season } from "../../domain/season";

interface SeasonEditDrawerProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  season: Season | null;
}

export function SeasonEditDrawer({
  open,
  onOpenChange,
  season,
}: SeasonEditDrawerProps) {
  const { updateSeason } = useSeasonStore();
  const [formData, setFormData] = useState({
    name: "",
    startDate: "",
    endDate: "",
  });
  const [isUpdating, setIsUpdating] = useState(false);

  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Å–µ–∑–æ–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (season && open) {
      setFormData({
        name: season.name,
        startDate: season.startDate.toISOString().slice(0, 16), // –§–æ—Ä–º–∞—Ç –¥–ª—è datetime-local
        endDate: season.endDate.toISOString().slice(0, 16),
      });
    }
  }, [season, open]);

  const handleInputChange = (field: string, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  const handleUpdateSeason = async () => {
    if (!season) return;

    // Basic validation
    if (!formData.name || !formData.startDate || !formData.endDate) {
      toast.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
      return;
    }

    // Validate dates
    const startDate = new Date(formData.startDate);
    const endDate = new Date(formData.endDate);
    const now = new Date();

    if (endDate <= startDate) {
      toast.error("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞");
      return;
    }

    try {
      setIsUpdating(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∑–æ–Ω
      const seasonData = {
        name: formData.name,
        startDate: startDate.toISOString(),
        endDate: endDate.toISOString()
      };

      await updateSeason(season.id, seasonData);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      toast.success("–°–µ–∑–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! ‚ú®", {
        description: `"${formData.name}" –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω`,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      return;
    } finally {
      setIsUpdating(false);
    }

    onOpenChange(false);
  };

  const handleSaveDraft = () => {
    toast.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫! üìã");
    onOpenChange(false);
  };

  if (!season) return null;

  return (
    <Drawer open={open} onOpenChange={onOpenChange}>
      <DrawerContent className="h-[90vh] flex flex-col">
        <div className="mx-auto w-full max-w-4xl flex flex-col h-full">
          <DrawerHeader className="border-b border-border bg-gradient-to-r from-card to-primary/5 flex-shrink-0 rounded-t-lg mx-6 p-0">
            <div className="flex items-center justify-between p-6">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-gradient-to-br from-primary to-info rounded-lg flex items-center justify-center">
                  <Edit className="w-5 h-5 text-white" />
                </div>
                <DrawerTitle className="text-lg font-semibold">
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω
                </DrawerTitle>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onOpenChange(false)}
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </DrawerHeader>

          <div className="px-6 pt-6 pb-12 overflow-y-auto flex-1">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Main Season Details */}
              <div className="lg:col-span-2 space-y-6">
                <Card className="card-enhanced">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Star className="w-5 h-5 text-primary" />
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="season-name">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ *</Label>
                      <Input
                        id="season-name"
                        placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, Delta Constellation"
                        value={formData.name}
                        onChange={(e) =>
                          handleInputChange("name", e.target.value)
                        }
                      />
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="season-start">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ *</Label>
                        <Input
                          id="season-start"
                          type="datetime-local"
                          value={formData.startDate}
                          onChange={(e) =>
                            handleInputChange("startDate", e.target.value)
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="season-end">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è *</Label>
                        <Input
                          id="season-end"
                          type="datetime-local"
                          value={formData.endDate}
                          onChange={(e) =>
                            handleInputChange("endDate", e.target.value)
                          }
                        />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Season Preview */}
              <div className="space-y-6">
                <Card className="card-enhanced bg-gradient-to-br from-primary/5 to-info/5">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Calendar className="w-5 h-5 text-rewards-amber" />
                      –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3 text-sm">
                    {formData.name && (
                      <div>
                        <strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {formData.name}
                      </div>
                    )}
                    {formData.startDate && (
                      <div>
                        <strong>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</strong>{" "}
                        <span className="text-muted-foreground">
                          {new Date(formData.startDate).toLocaleDateString('ru-RU', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </span>
                      </div>
                    )}
                    {formData.endDate && (
                      <div>
                        <strong>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</strong>{" "}
                        <span className="text-muted-foreground">
                          {new Date(formData.endDate).toLocaleDateString('ru-RU', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </span>
                      </div>
                    )}
                    {formData.startDate && formData.endDate && (
                      <div>
                        <strong>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong>{" "}
                        <span className="text-muted-foreground">
                          {Math.ceil((new Date(formData.endDate).getTime() - new Date(formData.startDate).getTime()) / (1000 * 60 * 60 * 24))} –¥–Ω–µ–π
                        </span>
                      </div>
                    )}
                    <div className="pt-2 border-t border-border">
                      <div className="text-xs text-muted-foreground">
                        <strong>ID —Å–µ–∑–æ–Ω–∞:</strong> {season.id}
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Action Buttons */}
                <div className="space-y-3">
                  <Button
                    onClick={handleUpdateSeason}
                    disabled={isUpdating}
                    className="w-full bg-primary hover:bg-primary-600 text-white disabled:opacity-50"
                  >
                    <Edit className="w-4 h-4 mr-2" />
                    {isUpdating ? "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..." : "–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–∑–æ–Ω"}
                  </Button>
                  <Button
                    variant="outline"
                    onClick={handleSaveDraft}
                    className="w-full"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
                  </Button>
                </div>
              </div>
            </div>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É */}
            <div className="h-12"></div>
          </div>
        </div>
      </DrawerContent>
    </Drawer>
  );
}
