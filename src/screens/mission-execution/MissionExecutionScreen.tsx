import { useEffect, useMemo } from "react";
import { useParams } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "../../components/ui/card";
import { Button } from "../../components/ui/button";
import { Badge } from "../../components/ui/badge";
import { Progress } from "../../components/ui/progress";
import { 
  ArrowLeft, 
  Star, 
  Zap, 
  Target, 
  CheckCircle,
  Award,
  Camera,
  QrCode,
  Radio,
  Code,
  Key,
  Upload
} from "lucide-react";
import { useMissionStore } from "../../stores/useMissionStore";
import { useUserStore } from "../../stores/useUserStore";

interface MissionExecutionScreenProps {
  onBack: () => void;
}

export function MissionExecutionScreen({ onBack }: MissionExecutionScreenProps) {
  const { missionId } = useParams<{ missionId: string }>();
  const { missions, fetchMissionById, isLoading } = useMissionStore();
  const { 
    user,
    fetchUserProfile, 
    fetchUserMission,
    completeTask
  } = useUserStore();

  // –ù–∞—Ö–æ–¥–∏–º –º–∏—Å—Å–∏—é –ø–æ ID
  const mission = missions.find(m => m.id.toString() === missionId);
  const userMission = user?.getMissionById(parseInt(missionId || '0', 10));

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  useEffect(() => {
    if (!user) {
      console.log('‚ö†Ô∏è User not found, loading profile...');
      fetchUserProfile();
    }
  }, [user, fetchUserProfile]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏—Å—Å–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ —Å—Ç–æ—Ä–µ
  useEffect(() => {
    if (missionId && !mission && !isLoading) {
      fetchMissionById(parseInt(missionId, 10));
    }
  }, [missionId, mission, isLoading, fetchMissionById]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º UserMission —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (missionId && !userMission && user) {
      console.log('üì• Loading user mission from server:', missionId);
      fetchUserMission(parseInt(missionId, 10));
    }
  }, [missionId, userMission, user, fetchUserMission]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const handleCompleteTask = async (taskId: number) => {
    if (!missionId) return;
    
    const numericMissionId = parseInt(missionId, 10);
    const userTask = userMission?.tasks.find(t => t.id === taskId);
    
    console.log('üîÑ Complete task:', {
      taskId,
      missionId: numericMissionId,
      currentStatus: userTask?.isCompleted,
      userMissionExists: !!userMission,
      tasksCount: userMission?.tasks.length
    });
    
    if (!userTask?.isCompleted) {
      console.log('‚úÖ Completing task...');
      await completeTask(taskId);
    }
  };


  // –¢–∏–ø—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
  const proofTypes = [
    { id: "photo", title: "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", icon: Camera, color: "text-blue-500" },
    { id: "qr", title: "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR", icon: QrCode, color: "text-purple-500" },
    { id: "rfid", title: "–ü—Ä–∏–ª–æ–∂–∏—Ç—å –º–µ—Ç–∫—É", icon: Radio, color: "text-green-500" },
    { id: "code", title: "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–æ–¥", icon: Code, color: "text-orange-500" },
    { id: "secret", title: "–í–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ", icon: Key, color: "text-amber-500" }
  ];

  // –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä proof requirement –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  const getRandomProof = (taskId: number) => {
    const index = taskId % proofTypes.length;
    return proofTypes[index];
  };

  // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∏—Å—Å–∏–π
  const categoryMapping = {
    'quest': '–ö–≤–µ—Å—Ç',
    'recruiting': '–†–µ–∫—Ä—É—Ç–∏–Ω–≥',
    'lecture': '–õ–µ–∫—Ü–∏—è',
    'simulator': '–°–∏–º—É–ª—è—Ç–æ—Ä'
  };

  const getCategoryLabel = (category: string) => {
    return categoryMapping[category as keyof typeof categoryMapping] || category;
  };

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º
  const groupedRewards = useMemo(() => {
    if (!mission) return { competencies: [], standaloneSkills: [] };

    const competenciesMap = new Map();
    const standaloneSkills: any[] = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
    mission.rewardCompetencies.forEach(compReward => {
      competenciesMap.set(compReward.competency.id, {
        competency: compReward.competency,
        levelIncrease: compReward.levelIncrease,
        skills: []
      });
    });

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≤—ã–∫–∏
    mission.rewardSkills.forEach(skillReward => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–≤—ã–∫ –≤ –∫–∞–∫–æ–π-—Ç–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
      let addedToCompetency = false;
      
      mission.rewardCompetencies.forEach(compReward => {
        const skillInComp = compReward.competency.skills?.find(
          s => s.id === skillReward.skill.id
        );
        if (skillInComp) {
          const comp = competenciesMap.get(compReward.competency.id);
          if (comp) {
            comp.skills.push(skillReward);
            addedToCompetency = true;
          }
        }
      });

      if (!addedToCompetency) {
        standaloneSkills.push(skillReward);
      }
    });

    return {
      competencies: Array.from(competenciesMap.values()),
      standaloneSkills
    };
  }, [mission]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ userMission
  const totalTasksCount = mission?.tasks.length || 0;
  const completedTasksCount = userMission?.completedTasksCount || 0;
  const allTasksCompleted = totalTasksCount > 0 && completedTasksCount === totalTasksCount;

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üîç Mission state:', {
    missionId,
    hasMission: !!mission,
    hasUserMission: !!userMission,
    completedTasks: completedTasksCount,
    totalTasks: totalTasksCount,
    userMissionTasks: userMission?.tasks.map(t => ({ id: t.id, completed: t.isCompleted }))
  });

  const getMissionStatus = () => {
    if (userMission?.isCompleted) return 'completed';
    if (completedTasksCount > 0 && completedTasksCount < totalTasksCount) return 'in_progress';
    if (allTasksCompleted) return 'ready_to_complete';
    return 'not_started';
  };

  const missionStatus = getMissionStatus();
  const statusLabels = {
    'not_started': '–ù–µ –Ω–∞—á–∞—Ç–∞',
    'in_progress': '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
    'ready_to_complete': '–ì–æ—Ç–æ–≤–∞ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é',
    'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
  };
  const statusColors = {
    'not_started': 'bg-muted text-muted-foreground',
    'in_progress': 'bg-info/10 text-info border-info/30',
    'ready_to_complete': 'bg-warning/10 text-warning border-warning/30',
    'completed': 'bg-success/10 text-success border-success/30'
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Å—Å–∏–∏...</div>
      </div>
    );
  }

  if (!mission) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardContent className="p-6 text-center">
            <p className="text-muted-foreground mb-4">–ú–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
            <Button onClick={onBack}>
              <ArrowLeft className="w-4 h-4 mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen-dvh bg-background">
      {/* Cosmic Background */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-10 right-10 w-64 h-64 bg-gradient-to-br from-soft-cyan/5 to-info/5 rounded-full blur-3xl"></div>
        <div className="absolute bottom-20 left-10 w-48 h-48 bg-gradient-to-br from-primary/5 to-navy-accent/5 rounded-full blur-2xl"></div>
      </div>

      <div className="max-w-5xl mx-auto p-4 md:p-6 relative min-w-0">
        {/* Header */}
        <div className="mb-6">
          <Button
            variant="ghost"
            size="sm"
            onClick={onBack}
            className="mb-4"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ù–∞–∑–∞–¥
          </Button>

          <Card className="cosmic-gradient text-white overflow-hidden relative">
            <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent opacity-50"></div>
            <CardContent className="p-6 relative">
              <div className="space-y-4">
                <div>
                  <div className="flex items-center gap-2 mb-3">
                    <Badge className="badge-on-gradient">
                      {getCategoryLabel(mission.category)}
                    </Badge>
                    <Badge variant="outline" className={`${statusColors[missionStatus]} border`}>
                      {statusLabels[missionStatus]}
                    </Badge>
                  </div>
                  <h1 className="text-2xl md:text-3xl font-bold text-wrap line-clamp-2">{mission.title}</h1>
                  <p className="text-white/80 mt-2 text-wrap line-clamp-4">{mission.description}</p>
                </div>

                {/* –ù–∞–≥—Ä–∞–¥—ã */}
                <div className="space-y-3">
                  <div className="flex items-center gap-3 flex-wrap">
                    <Badge className="badge-on-gradient">
                      <Star className="w-3 h-3 mr-1" />
                      {mission.rewardXp} XP
                    </Badge>
                    <Badge className="badge-on-gradient">
                      <Zap className="w-3 h-3 mr-1" />
                      {mission.rewardMana} –ú–∞–Ω–∞
                    </Badge>
                    {mission.rewardArtifacts.length > 0 && (
                      <Badge className="badge-on-gradient">
                        <Award className="w-3 h-3 mr-1" />
                        {mission.rewardArtifacts.length} {mission.rewardArtifacts.length === 1 ? '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç' : '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤'}
                      </Badge>
                    )}
                  </div>

                  {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π */}
                  {groupedRewards.competencies.length > 0 && (
                    <div className="text-white/90 text-sm">
                      <div className="font-medium mb-2">–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π:</div>
                      {groupedRewards.competencies.map(comp => (
                        <div key={comp.competency.id} className="ml-2 mb-2">
                          <div className="flex items-center gap-2">
                            <span>‚Ä¢ {comp.competency.name}</span>
                            <span className="text-white/60">(+{comp.levelIncrease})</span>
                          </div>
                          {comp.skills.length > 0 && (
                            <div className="ml-4 mt-1 space-y-1">
                              {comp.skills.map((skill: any) => (
                                <div key={skill.skill.id} className="flex items-center gap-2 text-xs text-white/70">
                                  <span>- {skill.skill.name}</span>
                                  <span className="text-white/50">(+{skill.levelIncrease})</span>
                                </div>
                              ))}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  )}

                  {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –¥—Ä—É–≥–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ */}
                  {groupedRewards.standaloneSkills.length > 0 && (
                    <div className="text-white/90 text-sm">
                      <div className="font-medium mb-2">–ü—Ä–æ–≥—Ä–µ—Å—Å –¥—Ä—É–≥–∏—Ö –Ω–∞–≤—ã–∫–æ–≤:</div>
                      {groupedRewards.standaloneSkills.map((skill: any) => (
                        <div key={skill.skill.id} className="ml-2 flex items-center gap-2">
                          <span>‚Ä¢ {skill.skill.name}</span>
                          <span className="text-white/60">(+{skill.levelIncrease})</span>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* –ó–∞–¥–∞—á–∏ –º–∏—Å—Å–∏–∏ */}
        <div className="space-y-4">
          <h2 className="text-xl font-semibold flex items-center gap-2">
            <Target className="w-5 h-5 text-primary" />
            –ó–∞–¥–∞—á–∏ –º–∏—Å—Å–∏–∏
          </h2>

          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –Ω–µ–∑–∞–∏–Ω—Ç—ã—Ö –º–∏—Å—Å–∏–π */}
          {missionStatus === 'not_started' && (
            <Card className="border-primary/30 bg-primary/5">
              <CardContent className="p-4">
                <p className="text-sm text-muted-foreground">
                  –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ.
                </p>
              </CardContent>
            </Card>
          )}

          {mission.tasks.length === 0 ? (
            <Card>
              <CardContent className="p-6 text-center text-muted-foreground">
                –ó–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–π –º–∏—Å—Å–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-3">
              {mission.tasks.map((task, index) => {
                const userTask = userMission?.tasks.find(t => t.id === task.id);
                const isTaskCompleted = userTask?.isCompleted || false;
                const proofType = getRandomProof(task.id);
                const ProofIcon = proofType.icon;

                return (
                  <Card key={task.id} className={`card-enhanced ${isTaskCompleted ? 'border-success/30 bg-success/5' : ''}`}>
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <div className={`w-6 h-6 rounded-full flex items-center justify-center shrink-0 mt-0.5 ${
                          isTaskCompleted 
                            ? 'bg-success text-white' 
                            : 'border-2 border-primary'
                        }`}>
                          {isTaskCompleted ? (
                            <CheckCircle className="w-4 h-4" />
                          ) : (
                            <span className="text-xs font-semibold">{index + 1}</span>
                          )}
                        </div>
                        <div className="flex-1 min-w-0 space-y-3">
                          <div>
                            <h4 className="font-medium text-sm mb-1">{task.title}</h4>
                            <p className="text-xs text-muted-foreground text-wrap line-clamp-4">{task.description}</p>
                          </div>
                          <div className="flex flex-col sm:flex-row items-stretch sm:items-center gap-2">
                            {!isTaskCompleted && (
                              <>
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  className={`${proofType.color} w-full h-12 sm:h-9 sm:w-auto`}
                                >
                                  <ProofIcon className="w-4 h-4 mr-2" />
                                  {proofType.title}
                                </Button>
                                <Button 
                                  variant="default"
                                  size="sm"
                                  onClick={() => handleCompleteTask(task.id)}
                                  className="w-full h-12 sm:h-9 sm:w-auto"
                                >
                                  <CheckCircle className="w-4 h-4 mr-2" />
                                  –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
                                </Button>
                              </>
                            )}
                          </div>
                        </div>
                        {isTaskCompleted && (
                          <Badge variant="outline" className="bg-success/10 text-success border-success/30 text-xs">
                            –ó–∞–≤–µ—Ä—à–µ–Ω–æ
                          </Badge>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          )}

          {/* –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ */}
          <Card className="orbital-border mt-6">
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2">
                <Upload className="w-5 h-5 text-primary" />
                –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground mb-4">
                –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
              </p>
              <div className="flex flex-wrap gap-3">
                <Button variant="outline" size="sm" disabled={!allTasksCompleted} className="h-12 w-full sm:w-auto">
                  <Camera className="w-4 h-4 mr-2 text-blue-500" />
                  –ò—Ç–æ–≥–æ–≤–æ–µ —Ñ–æ—Ç–æ
                </Button>
                <Button variant="outline" size="sm" disabled={!allTasksCompleted} className="h-12 w-full sm:w-auto">
                  <Code className="w-4 h-4 mr-2 text-orange-500" />
                  –ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞
                </Button>
                <Button variant="outline" size="sm" disabled={!allTasksCompleted} className="h-12 w-full sm:w-auto">
                  <Key className="w-4 h-4 mr-2 text-amber-500" />
                  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–∞
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏ */}
          <Card className={`mt-6 ${allTasksCompleted ? 'border-success/50 bg-success/5 shadow-lg' : 'border-muted'}`}>
            <CardContent className="p-6">
              <div className="space-y-4">
                <div className="space-y-1">
                  <div className="text-sm font-medium">
                    {allTasksCompleted ? '–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!' : '–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'}
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-xs text-muted-foreground">
                      {completedTasksCount} –∏–∑ {totalTasksCount} –∑–∞–¥–∞–Ω–∏–π
                    </span>
                    <Progress value={(completedTasksCount / totalTasksCount) * 100} className="h-2 w-full md:w-48" />
                  </div>
                </div>
                
                {allTasksCompleted ? (
                  <div className="space-y-3">
                    <div className="text-sm text-success font-medium">
                      üéâ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –∑–∞–¥–∞—á–∏, –º–∏—Å—Å–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.
                    </div>
                    <Button 
                      size="lg" 
                      onClick={onBack}
                      className="bg-primary hover:bg-primary/90 text-white"
                    >
                      <ArrowLeft className="w-5 h-5 mr-2" />
                      –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ–∑–æ–Ω—É
                    </Button>
                  </div>
                ) : (
                  <div className="text-sm text-muted-foreground">
                    –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏—Å—Å–∏–∏
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
