import { create } from "zustand";
import {
  User,
  DetailedUser,
  UserTask,
  UserMission,
  UserCompetency,
  UserSkill,
} from "../domain";
import userService from "../api/services/userService";
import { useRankStore } from "./useRankStore";

interface UserState {
  // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
  user: DetailedUser | null;
  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞)
  allUsers: User[];
  isLoading: boolean;
  error: string | null;
}

interface UserActions {
  // ===== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ú–ï–¢–û–î–´ =====
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  fetchUserProfile: () => Promise<void>;
  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  fetchUserMission: (missionId: number) => Promise<void>;
  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–∏—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–ø–∏—Å–∫—É ID
  fetchAllUserMissions: (missionIds: number[]) => Promise<void>;
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  completeTask: (taskId: number) => Promise<void>;
  // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  clearUserData: () => void;
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–æ—Ä–µ
  updateUser: (user: DetailedUser) => void;

  // ===== –ê–î–ú–ò–ù–°–ö–ò–ï –ú–ï–¢–û–î–´ =====
  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  fetchAllUsers: () => Promise<void>;
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
  fetchUser: (userLogin: string) => Promise<User | null>;
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
  updateUserByLogin: (userLogin: string, userData: any) => Promise<void>;
  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
  fetchUserMissionsByLogin: (userLogin: string) => Promise<UserMission[]>;
  // –û–¥–æ–±—Ä–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  approveUserMission: (missionId: number, userLogin: string) => Promise<void>;

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  addArtifactToUser: (userLogin: string, artifactId: number) => Promise<void>;
  removeArtifactFromUser: (
    userLogin: string,
    artifactId: number
  ) => Promise<void>;

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  addCompetencyToUser: (
    userLogin: string,
    competencyId: number,
    level?: number
  ) => Promise<void>;
  updateUserCompetencyLevel: (
    userLogin: string,
    competencyId: number,
    level: number
  ) => Promise<void>;
  removeCompetencyFromUser: (
    userLogin: string,
    competencyId: number
  ) => Promise<void>;

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö
  addSkillToUser: (
    userLogin: string,
    competencyId: number,
    skillId: number,
    level?: number
  ) => Promise<void>;
  updateUserSkillLevel: (
    userLogin: string,
    competencyId: number,
    skillId: number,
    level: number
  ) => Promise<void>;
  removeSkillFromUser: (
    userLogin: string,
    competencyId: number,
    skillId: number
  ) => Promise<void>;
}

export const useUserStore = create<UserState & UserActions>(
  (
    set: (partial: Partial<UserState & UserActions>) => void,
    get: () => UserState & UserActions
  ) => ({
  user: null,
  allUsers: [],
  isLoading: false,
  error: null,

    // ===== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ú–ï–¢–û–î–´ =====

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  fetchUserProfile: async () => {
    try {
        console.log("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
      set({ isLoading: true, error: null });
      const response = await userService.getProfile();

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        const user = DetailedUser.fromDetailedResponse(response.data);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
        try {
          const missionsResponse = await userService.getUserMissions();
          const userMissions =
            missionsResponse.data.missions?.map((missionData) =>
              UserMission.fromResponse(missionData)
            ) || [];

          // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏—Å—Å–∏—è–º–∏
          const userWithMissions = new DetailedUser(
            user.login,
            user.firstName,
            user.lastName,
            user.role,
            user.rankId,
            user.xp,
            user.mana,
            userMissions,
            user.artifacts,
            user.competencies
          );

          set({ user: userWithMissions, isLoading: false });
          console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω");
        } catch (missionsError) {
          console.warn(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ –º–∏—Å—Å–∏–π"
          );
          set({ user, isLoading: false });
        }
    } catch (error: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:", error);
        set({
          error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          isLoading: false,
        });
      }
    },


  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
  fetchUserMission: async (missionId: number) => {
    try {
      const currentUser = get().user;
      if (!currentUser) return;

      const response = await userService.getUserMission(missionId);
      const userMissionData = response.data;
      const newUserMission = UserMission.fromResponse(userMissionData);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∏—Å—Å–∏—é –≤ user.missions
        const existingIndex = currentUser.missions.findIndex(
          (m) => m.id === missionId
        );
      let updatedMissions = [...currentUser.missions];

      if (existingIndex >= 0) {
        updatedMissions[existingIndex] = newUserMission;
      } else {
        updatedMissions.push(newUserMission);
      }

        const updatedUser = new DetailedUser(
        currentUser.login,
        currentUser.firstName,
        currentUser.lastName,
        currentUser.role,
        currentUser.rankId,
        currentUser.xp,
        currentUser.mana,
        updatedMissions,
        currentUser.artifacts,
        currentUser.competencies
      );

      set({ user: updatedUser });
    } catch (error: any) {
        set({
          error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        });
    }
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–ø–∏—Å–∫—É ID
  fetchAllUserMissions: async (missionIds: number[]) => {
    try {
      const currentUser = get().user;
      if (!currentUser) return;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–∏—Å—Å–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const missionPromises = missionIds.map((id) =>
          userService.getUserMission(id)
        );
      const responses = await Promise.allSettled(missionPromises);

      // –°–æ–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏
      const userMissions: UserMission[] = [];
      responses.forEach((result, index) => {
          if (result.status === "fulfilled") {
          const userMission = UserMission.fromResponse(result.value.data);
          userMissions.push(userMission);
        } else {
            console.error(
              `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏—é ${missionIds[index]}:`,
              result.reason
            );
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º user.missions (–∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –º–∏—Å—Å–∏–∏ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ)
        const updatedUser = new DetailedUser(
        currentUser.login,
        currentUser.firstName,
        currentUser.lastName,
        currentUser.role,
        currentUser.rankId,
        currentUser.xp,
        currentUser.mana,
        userMissions,
        currentUser.artifacts,
        currentUser.competencies
      );

      set({ user: updatedUser });
    } catch (error: any) {
        set({
          error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        });
      }
    },

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    completeTask: async (taskId: number) => {
      try {
        const currentUser = get().user;
        if (!currentUser) return;

        await userService.completeTask(taskId, currentUser.login);

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await get().fetchUserProfile();
      } catch (error: any) {
        set({ error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É" });
      }
    },

    clearUserData: () => {
      set({ user: null, allUsers: [], error: null, isLoading: false });
    },

    updateUser: (user: DetailedUser) => {
      set({ user });
    },

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∏—Å—Å–∏—é —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –Ω–∞–≥—Ä–∞–¥
    completeMission: async (missionId: number) => {
      // –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω
    },

    // ===== –ê–î–ú–ò–ù–°–ö–ò–ï –ú–ï–¢–û–î–´ =====

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è HR)
    fetchAllUsers: async () => {
      try {
        const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
          return;
        }

        const response = await userService.getUsers();
        const users =
          response.data.users?.map((userData) => User.fromResponse(userData)) ||
          [];
        set({ allUsers: users });
      } catch (error: any) {
        set({
          error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        });
      }
    },

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
    fetchUser: async (userLogin: string): Promise<User | null> => {
      try {
        const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
          return null;
        }
        const response = await userService.getUser(userLogin);
        const user = User.fromResponse(response.data);
        return user;
      } catch (error: any) {
        set({
          error:
            error.message ||
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userLogin}`,
        });
        return null;
      }
    },

    // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É (–¥–ª—è HR/Admin)
    updateUserByLogin: async (userLogin: string, userData: any) => {
      try {
        const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
          return;
        }

        await userService.updateUser(userLogin, userData);

        // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ allUsers, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–∞–º
        const allUsers = get().allUsers;
        if (allUsers.some((u) => u.login === userLogin)) {
          await get().fetchAllUsers();
        }
      } catch (error: any) {
        set({
          error:
            error.message ||
            `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userLogin}`,
        });
        throw error;
    }
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
  fetchUserMissionsByLogin: async (userLogin: string) => {
    try {
        const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
          return [];
        }
      const response = await userService.getUserMissionsByLogin(userLogin);
        const userMissions =
          response.data.missions?.map((missionData) =>
            UserMission.fromResponse(missionData)
          ) || [];
      return userMissions;
    } catch (error: any) {
        set({
          error:
            error.message ||
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userLogin}`,
        });
      return [];
    }
  },

  // –û–¥–æ–±—Ä–∏—Ç—å –º–∏—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è HR)
  approveUserMission: async (missionId: number, userLogin: string) => {
    try {
      const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
        return;
      }

      await userService.approveUserMission(missionId, userLogin);
    } catch (error: any) {
        set({ error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –º–∏—Å—Å–∏—é" });
    }
  },

  // –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  addArtifactToUser: async (userLogin: string, artifactId: number) => {
    try {
        const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
          return;
        }
      await userService.addArtifactToUser(userLogin, artifactId);
      } catch (error: any) {
        set({ error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç" });
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  removeArtifactFromUser: async (userLogin: string, artifactId: number) => {
    try {
        const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
          return;
        }
      await userService.removeArtifactFromUser(userLogin, artifactId);
      } catch (error: any) {
        set({ error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç" });
    }
  },

  // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    addCompetencyToUser: async (
      userLogin: string,
      competencyId: number,
      level: number = 0
    ) => {
      try {
        const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
          return;
        }
      await userService.addCompetencyToUser(userLogin, competencyId, level);
      } catch (error: any) {
        set({ error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é" });
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUserCompetencyLevel: async (
      userLogin: string,
      competencyId: number,
      level: number
    ) => {
      try {
      const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
          return;
        }
        await userService.updateUserCompetencyLevel(
          userLogin,
          competencyId,
          level
        );
      } catch (error: any) {
        set({
          error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
        });
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    removeCompetencyFromUser: async (
      userLogin: string,
      competencyId: number
    ) => {
    try {
        const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
          return;
        }
      await userService.removeCompetencyFromUser(userLogin, competencyId);
      } catch (error: any) {
        set({ error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é" });
    }
  },

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    addSkillToUser: async (
      userLogin: string,
      competencyId: number,
      skillId: number,
      level: number = 0
    ) => {
      try {
      const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
          return;
        }
        await userService.addSkillToUser(
          userLogin,
          competencyId,
          skillId,
          level
        );
      } catch (error: any) {
        set({ error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫" });
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    updateUserSkillLevel: async (
      userLogin: string,
      competencyId: number,
      skillId: number,
      level: number
    ) => {
      try {
      const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
          return;
        }
        await userService.updateUserSkillLevel(
          userLogin,
          competencyId,
          skillId,
          level
        );
      } catch (error: any) {
        set({ error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞" });
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—ã–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    removeSkillFromUser: async (
      userLogin: string,
      competencyId: number,
      skillId: number
    ) => {
    try {
      const currentUser = get().user;
        if (!currentUser || !currentUser.isAdmin) {
      return;
        }
        await userService.removeSkillFromUser(userLogin, competencyId, skillId);
      } catch (error: any) {
        set({ error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–≤—ã–∫" });
      }
    },
  })
);
