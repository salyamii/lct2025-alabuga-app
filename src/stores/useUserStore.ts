import { create } from 'zustand';
import { User, UserTask, UserMission, UserCompetency, UserSkill } from '../domain';
import userService from '../api/services/userService';
import { useRankStore } from './useRankStore';

interface UserState {
  user: User | null;
  allUsers: User[];
  isLoading: boolean;
  error: string | null;
}

interface UserActions {
  fetchUserProfile: () => Promise<void>;
  fetchAllUsers: () => Promise<void>;
  fetchUser: (userLogin: string) => Promise<User | null>;
  updateUserProfile: (userData: any) => Promise<void>;
  updateUserByLogin: (userLogin: string, userData: any) => Promise<void>;
  fetchUserMission: (missionId: number) => Promise<void>;
  fetchAllUserMissions: (missionIds: number[]) => Promise<void>;
  fetchUserMissionsByLogin: (userLogin: string) => Promise<UserMission[]>;
  approveUserMission: (missionId: number, userLogin: string) => Promise<void>;
  addArtifactToUser: (userLogin: string, artifactId: number) => Promise<void>;
  removeArtifactFromUser: (userLogin: string, artifactId: number) => Promise<void>;
  addCompetencyToUser: (userLogin: string, competencyId: number, level?: number) => Promise<void>;
  updateUserCompetencyLevel: (userLogin: string, competencyId: number, level: number) => Promise<void>;
  removeCompetencyFromUser: (userLogin: string, competencyId: number) => Promise<void>;
  addSkillToUser: (userLogin: string, competencyId: number, skillId: number, level?: number) => Promise<void>;
  updateUserSkillLevel: (userLogin: string, competencyId: number, skillId: number, level: number) => Promise<void>;
  removeSkillFromUser: (userLogin: string, competencyId: number, skillId: number) => Promise<void>;
  completeTask: (taskId: number) => Promise<void>;
  clearUserData: () => void;
  updateUser: (user: User) => void;
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á –∏ –º–∏—Å—Å–∏–π (–ª–æ–∫–∞–ª—å–Ω–æ)
  completeTaskLocal: (missionId: number, taskId: number) => void;
  uncompleteTask: (missionId: number, taskId: number) => void;
  completeMission: (missionId: number) => void;
  uncompleteMission: (missionId: number) => void;
}

export const useUserStore = create<UserState & UserActions>((set: (partial: Partial<UserState & UserActions>) => void, get: () => UserState & UserActions) => ({
  user: null,
  allUsers: [],
  isLoading: false,
  error: null,

  fetchUserProfile: async () => {
    try {
      console.log('üì• Fetching user profile...');
      set({ isLoading: true, error: null });
      const response = await userService.getProfile();
      console.log('üì¶ Profile response:', response.data);
      const user = User.fromDetailedResponse(response.data);
      console.log('‚úÖ User created:', {
        login: user.login,
        fullName: user.fullName,
        rankId: user.rankId,
        xp: user.xp,
        mana: user.mana,
        artifacts: user.artifacts.length,
        competencies: user.competencies.length
      });
      set({ user, isLoading: false });
    } catch (error: any) {
      console.error('‚ùå Error fetching profile:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', isLoading: false });
    }
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è HR)
  fetchAllUsers: async () => {
    try {
      const currentUser = get().user;
      if (!currentUser || currentUser.role !== 'hr') {
        console.log('üîí –î–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—Ä–µ—â–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è HR)');
        return;
      }

      console.log('üì• Fetching all users...');
      const response = await userService.getUsers();
      const users = response.data.users?.map(userData => User.fromResponse(userData)) || [];
      console.log(`‚úÖ Loaded ${users.length} users`);
      set({ allUsers: users });
    } catch (error: any) {
      console.error('‚ùå Error fetching all users:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
    }
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
  fetchUser: async (userLogin: string): Promise<User | null> => {
    try {
      const response = await userService.getUser(userLogin);
      const user = User.fromDetailedResponse(response.data);
      console.log('‚úÖ User loaded:', user);
      return user;
    } catch (error: any) {
      set({ error: error.message || `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userLogin}` });
      return null;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserProfile: async (userData: any) => {
    try {
      const currentUser = get().user;
      if (!currentUser) return;

      console.log('üìù Updating user profile...');
      const response = await userService.updateUser(currentUser.login, userData);
      const updatedUser = User.fromResponse(response.data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const userWithMissions = new User(
        updatedUser.login,
        updatedUser.firstName,
        updatedUser.lastName,
        updatedUser.role,
        currentUser.rankId,
        currentUser.xp,
        currentUser.mana,
        currentUser.missions,
        currentUser.artifacts,
        currentUser.competencies
      );
      
      set({ user: userWithMissions });
      console.log('‚úÖ User profile updated');
    } catch (error: any) {
      console.error('‚ùå Error updating user profile:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É (–¥–ª—è HR/Admin)
  updateUserByLogin: async (userLogin: string, userData: any) => {
    try {
      await userService.updateUser(userLogin, userData);
      
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–æ—Ä
      const currentUser = get().user;
      if (currentUser && currentUser.login === userLogin) {
        await get().fetchUserProfile();
      }
      
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ allUsers, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–∞–º
      const allUsers = get().allUsers;
      if (allUsers.some(u => u.login === userLogin)) {
        await get().fetchAllUsers();
      }
      
    } catch (error: any) {
      set({ error: error.message || `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userLogin}` });
      throw error;
    }
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
  fetchUserMission: async (missionId: number) => {
    try {
      const currentUser = get().user;
      if (!currentUser) return;

      const response = await userService.getUserMission(missionId);
      const userMissionData = response.data;

      // –°–æ–∑–¥–∞–µ–º UserMission –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      const newUserMission = UserMission.fromResponse(userMissionData);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∏—Å—Å–∏—é –≤ user.missions
      const existingIndex = currentUser.missions.findIndex(m => m.id === missionId);
      let updatedMissions = [...currentUser.missions];

      if (existingIndex >= 0) {
        updatedMissions[existingIndex] = newUserMission;
      } else {
        updatedMissions.push(newUserMission);
      }

      const updatedUser = new User(
        currentUser.login,
        currentUser.firstName,
        currentUser.lastName,
        currentUser.role,
        currentUser.rankId,
        currentUser.xp,
        currentUser.mana,
        updatedMissions,
        currentUser.artifacts,
        currentUser.competencies
      );

      set({ user: updatedUser });
    } catch (error: any) {
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–ø–∏—Å–∫—É ID
  fetchAllUserMissions: async (missionIds: number[]) => {
    try {
      const currentUser = get().user;
      if (!currentUser) return;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–∏—Å—Å–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const missionPromises = missionIds.map(id => userService.getUserMission(id));
      const responses = await Promise.allSettled(missionPromises);

      // –°–æ–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏
      const userMissions: UserMission[] = [];
      responses.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          const userMission = UserMission.fromResponse(result.value.data);
          userMissions.push(userMission);
        } else {
          console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏—é ${missionIds[index]}:`, result.reason);
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º user.missions (–∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –º–∏—Å—Å–∏–∏ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ)
      const updatedUser = new User(
        currentUser.login,
        currentUser.firstName,
        currentUser.lastName,
        currentUser.role,
        currentUser.rankId,
        currentUser.xp,
        currentUser.mana,
        userMissions,
        currentUser.artifacts,
        currentUser.competencies
      );

      set({ user: updatedUser });
    } catch (error: any) {
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
  fetchUserMissionsByLogin: async (userLogin: string) => {
    try {
      console.log(`üì• Fetching missions for user: ${userLogin}`);
      const response = await userService.getUserMissionsByLogin(userLogin);
      const userMissions = response.data.missions?.map(missionData => UserMission.fromResponse(missionData)) || [];
      console.log(`‚úÖ Loaded ${userMissions.length} missions for user ${userLogin}`);
      return userMissions;
    } catch (error: any) {
      console.error(`‚ùå Error fetching missions for user ${userLogin}:`, error);
      set({ error: error.message || `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userLogin}` });
      return [];
    }
  },

  // –û–¥–æ–±—Ä–∏—Ç—å –º–∏—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è HR)
  approveUserMission: async (missionId: number, userLogin: string) => {
    try {
      const currentUser = get().user;
      if (!currentUser || currentUser.role !== 'HR') {
        console.log('üîí –î–æ—Å—Ç—É–ø –∫ –æ–¥–æ–±—Ä–µ–Ω–∏—é –º–∏—Å—Å–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è HR)');
        return;
      }

      console.log(`‚úÖ Approving mission ${missionId} for user ${userLogin}`);
      await userService.approveUserMission(missionId, userLogin);
      console.log('‚úÖ Mission approved successfully');
    } catch (error: any) {
      console.error('‚ùå Error approving mission:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –º–∏—Å—Å–∏—é' });
    }
  },

  // –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  addArtifactToUser: async (userLogin: string, artifactId: number) => {
    try {
      console.log(`üèÜ Adding artifact ${artifactId} to user ${userLogin}`);
      await userService.addArtifactToUser(userLogin, artifactId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const currentUser = get().user;
      if (currentUser && currentUser.login === userLogin) {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await get().fetchUserProfile();
      }
      
      console.log('‚úÖ Artifact added successfully');
    } catch (error: any) {
      console.error('‚ùå Error adding artifact:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç' });
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  removeArtifactFromUser: async (userLogin: string, artifactId: number) => {
    try {
      console.log(`üóëÔ∏è Removing artifact ${artifactId} from user ${userLogin}`);
      await userService.removeArtifactFromUser(userLogin, artifactId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const currentUser = get().user;
      if (currentUser && currentUser.login === userLogin) {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await get().fetchUserProfile();
      }
      
      console.log('‚úÖ Artifact removed successfully');
    } catch (error: any) {
      console.error('‚ùå Error removing artifact:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç' });
    }
  },

  // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  addCompetencyToUser: async (userLogin: string, competencyId: number, level: number = 0) => {
    try {
      console.log(`üìö Adding competency ${competencyId} (level ${level}) to user ${userLogin}`);
      await userService.addCompetencyToUser(userLogin, competencyId, level);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const currentUser = get().user;
      if (currentUser && currentUser.login === userLogin) {
        await get().fetchUserProfile();
      }
      
      console.log('‚úÖ Competency added successfully');
    } catch (error: any) {
      console.error('‚ùå Error adding competency:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é' });
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserCompetencyLevel: async (userLogin: string, competencyId: number, level: number) => {
    try {
      console.log(`üìà Updating competency ${competencyId} to level ${level} for user ${userLogin}`);
      await userService.updateUserCompetencyLevel(userLogin, competencyId, level);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const currentUser = get().user;
      if (currentUser && currentUser.login === userLogin) {
        await get().fetchUserProfile();
      }
      
      console.log('‚úÖ Competency level updated successfully');
    } catch (error: any) {
      console.error('‚ùå Error updating competency level:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏' });
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  removeCompetencyFromUser: async (userLogin: string, competencyId: number) => {
    try {
      console.log(`üóëÔ∏è Removing competency ${competencyId} from user ${userLogin}`);
      await userService.removeCompetencyFromUser(userLogin, competencyId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const currentUser = get().user;
      if (currentUser && currentUser.login === userLogin) {
        await get().fetchUserProfile();
      }
      
      console.log('‚úÖ Competency removed successfully');
    } catch (error: any) {
      console.error('‚ùå Error removing competency:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é' });
    }
  },

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
  addSkillToUser: async (userLogin: string, competencyId: number, skillId: number, level: number = 0) => {
    try {
      console.log(`üîß Adding skill ${skillId} (level ${level}) to user ${userLogin} in competency ${competencyId}`);
      await userService.addSkillToUser(userLogin, competencyId, skillId, level);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const currentUser = get().user;
      if (currentUser && currentUser.login === userLogin) {
        await get().fetchUserProfile();
      }
      
      console.log('‚úÖ Skill added successfully');
    } catch (error: any) {
      console.error('‚ùå Error adding skill:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫' });
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
  updateUserSkillLevel: async (userLogin: string, competencyId: number, skillId: number, level: number) => {
    try {
      console.log(`üìä Updating skill ${skillId} to level ${level} for user ${userLogin} in competency ${competencyId}`);
      await userService.updateUserSkillLevel(userLogin, competencyId, skillId, level);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const currentUser = get().user;
      if (currentUser && currentUser.login === userLogin) {
        await get().fetchUserProfile();
      }
      
      console.log('‚úÖ Skill level updated successfully');
    } catch (error: any) {
      console.error('‚ùå Error updating skill level:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞' });
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—ã–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
  removeSkillFromUser: async (userLogin: string, competencyId: number, skillId: number) => {
    try {
      console.log(`üóëÔ∏è Removing skill ${skillId} from user ${userLogin} in competency ${competencyId}`);
      await userService.removeSkillFromUser(userLogin, competencyId, skillId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const currentUser = get().user;
      if (currentUser && currentUser.login === userLogin) {
        await get().fetchUserProfile();
      }
      
      console.log('‚úÖ Skill removed successfully');
    } catch (error: any) {
      console.error('‚ùå Error removing skill:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–≤—ã–∫' });
    }
  },

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  completeTask: async (taskId: number) => {
    try {
      const currentUser = get().user;
      if (!currentUser) return;

      console.log(`‚úÖ Completing task ${taskId} for user ${currentUser.login}`);
      await userService.completeTask(taskId, currentUser.login);
      console.log('‚úÖ Task completed successfully');
    } catch (error: any) {
      console.error('‚ùå Error completing task:', error);
      set({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É' });
    }
  },

  clearUserData: () => {
    set({ user: null, allUsers: [], error: null });
  },

  updateUser: (user: User) => {
    set({ user });
  },

  // –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é (–ª–æ–∫–∞–ª—å–Ω–æ)
  completeTaskLocal: (missionId: number, taskId: number) => {
    const currentUser = get().user;
    if (!currentUser) {
      console.error('‚ùå No user found');
      return;
    }

    let updatedMissions = [...currentUser.missions];
    const missionIndex = updatedMissions.findIndex(m => m.id === missionId);

    console.log('üìù Completing task:', {
      missionId,
      taskId,
      missionIndex,
      totalMissions: updatedMissions.length
    });

    if (missionIndex >= 0) {
      // –ú–∏—Å—Å–∏—è —É–∂–µ –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
      const mission = updatedMissions[missionIndex];
      const updatedTasks = mission.tasks.map(task => 
        task.id === taskId 
          ? new UserTask(task.id, task.title, task.description, true)
          : task
      );

      console.log('‚úÖ Task updated:', {
        taskId,
        newStatus: true,
        tasksCount: updatedTasks.length
      });

      updatedMissions[missionIndex] = new UserMission(
        mission.id,
        mission.title,
        mission.description,
        mission.rewardXp,
        mission.rewardMana,
        mission.rankRequirement,
        mission.seasonId,
        mission.category,
        mission.isCompleted,
        mission.isApproved,
        updatedTasks,
        mission.rewardArtifacts,
        mission.rewardCompetencies,
        mission.rewardSkills
      );
    } else {
      console.error('‚ùå Mission not found in user.missions:', missionId);
    }

    const updatedUser = new User(
      currentUser.login,
      currentUser.firstName,
      currentUser.lastName,
      currentUser.role,
      currentUser.rankId,
      currentUser.xp,
      currentUser.mana,
      updatedMissions,
      currentUser.artifacts,
      currentUser.competencies
    );

    set({ user: updatedUser });
    console.log('‚úÖ User updated in store');
  },

  // –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  uncompleteTask: (missionId: number, taskId: number) => {
    const currentUser = get().user;
    if (!currentUser) return;

    let updatedMissions = [...currentUser.missions];
    const missionIndex = updatedMissions.findIndex(m => m.id === missionId);

    if (missionIndex >= 0) {
      const mission = updatedMissions[missionIndex];
      const updatedTasks = mission.tasks.map(task => 
        task.id === taskId 
          ? new UserTask(task.id, task.title, task.description, false)
          : task
      );

      updatedMissions[missionIndex] = new UserMission(
        mission.id,
        mission.title,
        mission.description,
        mission.rewardXp,
        mission.rewardMana,
        mission.rankRequirement,
        mission.seasonId,
        mission.category,
        mission.isCompleted,
        mission.isApproved,
        updatedTasks,
        mission.rewardArtifacts,
        mission.rewardCompetencies,
        mission.rewardSkills
      );
    }

    const updatedUser = new User(
      currentUser.login,
      currentUser.firstName,
      currentUser.lastName,
      currentUser.role,
      currentUser.rankId,
      currentUser.xp,
      currentUser.mana,
      updatedMissions,
      currentUser.artifacts,
      currentUser.competencies
    );

    set({ user: updatedUser });
  },

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∏—Å—Å–∏—é —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –Ω–∞–≥—Ä–∞–¥
  completeMission: (missionId: number) => {
    const currentUser = get().user;
    if (!currentUser) return;

    let updatedMissions = [...currentUser.missions];
    const missionIndex = updatedMissions.findIndex(m => m.id === missionId);

    if (missionIndex < 0) {
      console.error('‚ùå Mission not found for completion:', missionId);
      return;
    }

    const mission = updatedMissions[missionIndex];
    
    // –ü–æ–º–µ—á–∞–µ–º –º–∏—Å—Å–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
    updatedMissions[missionIndex] = new UserMission(
      mission.id,
      mission.title,
      mission.description,
      mission.rewardXp,
      mission.rewardMana,
      mission.rankRequirement,
      mission.seasonId,
      mission.category,
      true, // isCompleted = true
      mission.isApproved, // isApproved –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      mission.tasks,
      mission.rewardArtifacts,
      mission.rewardCompetencies,
      mission.rewardSkills
    );

    // –ù–∞—á–∏—Å–ª—è–µ–º XP –∏ –ú–∞–Ω—É
    const newXP = currentUser.xp + mission.rewardXp;
    const newMana = currentUser.mana + mission.rewardMana;

    console.log('üí∞ –ù–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã:', {
      xp: `+${mission.rewardXp} (${currentUser.xp} ‚Üí ${newXP})`,
      mana: `+${mission.rewardMana} (${currentUser.mana} ‚Üí ${newMana})`
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let updatedCompetencies = [...currentUser.competencies];

    mission.rewardCompetencies.forEach(compReward => {
      const compIndex = updatedCompetencies.findIndex(c => c.id === compReward.competency.id);
      
      if (compIndex >= 0) {
        const competency = updatedCompetencies[compIndex];
        const newLevel = Math.min(competency.userLevel + compReward.levelIncrease, competency.maxLevel);
        
        console.log(`üìà –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è "${competency.name}": +${compReward.levelIncrease} (${competency.userLevel} ‚Üí ${newLevel})`);

        updatedCompetencies[compIndex] = new UserCompetency(
          competency.id,
          competency.name,
          competency.maxLevel,
          newLevel,
          competency.skills
        );
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö
    mission.rewardSkills.forEach(skillReward => {
      // –ò—â–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–æ—Ç –Ω–∞–≤—ã–∫
      updatedCompetencies = updatedCompetencies.map(competency => {
        const skillIndex = competency.skills.findIndex(s => s.id === skillReward.skill.id);
        
        if (skillIndex >= 0) {
          const skill = competency.skills[skillIndex];
          const newLevel = Math.min(skill.userLevel + skillReward.levelIncrease, skill.maxLevel);
          
          console.log(`üìä –ù–∞–≤—ã–∫ "${skill.name}" –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ "${competency.name}": +${skillReward.levelIncrease} (${skill.userLevel} ‚Üí ${newLevel})`);

          const updatedSkills = [...competency.skills];
          updatedSkills[skillIndex] = new UserSkill(
            skill.id,
            skill.name,
            skill.maxLevel,
            newLevel
          );

          return new UserCompetency(
            competency.id,
            competency.name,
            competency.maxLevel,
            competency.userLevel,
            updatedSkills
          );
        }
        
        return competency;
      });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (—Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
    const updatedArtifacts = [...currentUser.artifacts];
    mission.rewardArtifacts.forEach(artifact => {
      const alreadyHas = updatedArtifacts.some(a => a.id === artifact.id);
      if (!alreadyHas) {
        updatedArtifacts.push(artifact);
        console.log(`üèÜ –ü–æ–ª—É—á–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: "${artifact.title}"`);
      } else {
        console.log(`‚ÑπÔ∏è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç "${artifact.title}" —É–∂–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏`);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ XP
    const ranks = useRankStore.getState().ranks;
    let newRankId = currentUser.rankId;
    
    if (ranks.length > 0) {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–Ω–≥–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ XP
      const availableRanks = ranks.filter(rank => rank.requiredXp <= newXP);
      
      if (availableRanks.length > 0) {
        // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π —Ä–∞–Ω–≥ (—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º requiredXp)
        const highestRank = availableRanks.reduce((prev, current) => 
          (current.requiredXp > prev.requiredXp) ? current : prev
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–≤—ã—Å–∏–ª—Å—è –ª–∏ —Ä–∞–Ω–≥
        if (highestRank.id !== currentUser.rankId) {
          newRankId = highestRank.id;
          console.log(`‚¨ÜÔ∏è –ü–û–í–´–®–ï–ù–ò–ï –†–ê–ù–ì–ê! "${ranks.find(r => r.id === currentUser.rankId)?.name || 'Unknown'}" ‚Üí "${highestRank.name}"`);
        }
      }
    }

    const updatedUser = new User(
      currentUser.login,
      currentUser.firstName,
      currentUser.lastName,
      currentUser.role,
      newRankId,
      newXP,
      newMana,
      updatedMissions,
      updatedArtifacts,
      updatedCompetencies
    );

    set({ user: updatedUser });
    
    console.log('‚úÖ –ú–∏—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!');
  },

  // –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏ (–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á)
  uncompleteMission: (missionId: number) => {
    const currentUser = get().user;
    if (!currentUser) return;

    let updatedMissions = [...currentUser.missions];
    const missionIndex = updatedMissions.findIndex(m => m.id === missionId);

    if (missionIndex >= 0) {
      const mission = updatedMissions[missionIndex];
      
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const updatedTasks = mission.tasks.map(task => 
        new UserTask(task.id, task.title, task.description, false)
      );

      updatedMissions[missionIndex] = new UserMission(
        mission.id,
        mission.title,
        mission.description,
        mission.rewardXp,
        mission.rewardMana,
        mission.rankRequirement,
        mission.seasonId,
        mission.category,
        false, // isCompleted = false
        mission.isApproved, // isApproved –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        updatedTasks,
        mission.rewardArtifacts,
        mission.rewardCompetencies,
        mission.rewardSkills
      );
    }

    const updatedUser = new User(
      currentUser.login,
      currentUser.firstName,
      currentUser.lastName,
      currentUser.role,
      currentUser.rankId,
      currentUser.xp,
      currentUser.mana,
      updatedMissions,
      currentUser.artifacts,
      currentUser.competencies
    );

    set({ user: updatedUser });
  },
}));
